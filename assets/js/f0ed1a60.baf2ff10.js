"use strict";(self.webpackChunkmapping_mediator=self.webpackChunkmapping_mediator||[]).push([[579],{3905:function(n,e,t){t.d(e,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=a.createContext({}),s=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},d=function(n){var e=s(n.components);return a.createElement(l.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,l=n.parentName,d=p(n,["components","mdxType","originalType","parentName"]),c=s(t),m=o,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||r;return t?a.createElement(h,i(i({ref:e},d),{},{components:t})):a.createElement(h,i({ref:e},d))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,i=new Array(r);i[0]=c;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=n,p.mdxType="string"==typeof n?n:o,i[1]=p;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7578:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var a=t(3117),o=t(102),r=(t(7294),t(3905)),i=["components"],p={id:"api",title:"Mapping Mediator API",sidebar_label:"Mapping Mediator API"},l=void 0,s={unversionedId:"gettingStarted/api",id:"gettingStarted/api",title:"Mapping Mediator API",description:"There are two default reserved API paths within the Mapping Mediator. The first is the /uptime path and the second is the /endpoints path.",source:"@site/docs/gettingStarted/api.md",sourceDirName:"gettingStarted",slug:"/gettingStarted/api",permalink:"/openhim-mediator-mapping/docs/gettingStarted/api",editUrl:"https://github.com/jembi/openhim-mediator-mapping/edit/master/docs/docs/gettingStarted/api.md",tags:[],version:"current",frontMatter:{id:"api",title:"Mapping Mediator API",sidebar_label:"Mapping Mediator API"},sidebar:"someSidebar",previous:{title:"Endpoints",permalink:"/openhim-mediator-mapping/docs/gettingStarted/endpoints"},next:{title:"Sample Endpoint Schemas",permalink:"/openhim-mediator-mapping/docs/gettingStarted/samples"}},d=[{value:"Uptime",id:"uptime",children:[],level:2},{value:"Endpoints",id:"endpoints",children:[{value:"POST",id:"post",children:[],level:3},{value:"GET",id:"get",children:[{value:"GET all",id:"get-all",children:[],level:4},{value:"GET one",id:"get-one",children:[],level:4}],level:3},{value:"PUT",id:"put",children:[],level:3},{value:"DELETE",id:"delete",children:[],level:3}],level:2}],u={toc:d};function c(n){var e=n.components,t=(0,o.Z)(n,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There are two default reserved API paths within the Mapping Mediator. The first is the ",(0,r.kt)("inlineCode",{parentName:"p"},"/uptime")," path and the second is the ",(0,r.kt)("inlineCode",{parentName:"p"},"/endpoints")," path."),(0,r.kt)("h2",{id:"uptime"},"Uptime"),(0,r.kt)("p",null,"Uptime only accepts GET requests. i.e:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"curl http://localhost:3003/uptime\n")),(0,r.kt)("p",null,"The previous command should give you a response in this format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"milliseconds": 123456}\n')),(0,r.kt)("h2",{id:"endpoints"},"Endpoints"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"/endpoints")," path is used to interact with endpoint schemas. Please import ",(0,r.kt)("a",{parentName:"p",href:"https://www.getpostman.com/collections/de9443595ebafe610460"},"our Postman Collection")," for a more visual interaction with our examples. ",(0,r.kt)("a",{parentName:"p",href:"https://www.postman.com/features/mock-api/"},"Postman")," is a useful tool for testing out your config files as request data is easy to manipulate and save within the app."),(0,r.kt)("p",null,"The following HTTP methods are supported."),(0,r.kt)("h3",{id:"post"},"POST"),(0,r.kt)("p",null,"To create a new endpoint schema POST your JSON data to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/endpoints")," path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'curl --request POST \'http://localhost:3003/endpoints\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "name": "Endpoint Example",\n    "endpoint": {\n        "pattern": "/example",\n        "method": "GET"\n    },\n    "transformation": {\n        "input": "JSON",\n        "output": "JSON"\n    },\n    "inputMapping": {\n      "constants.example_constant":"hello"\n    },\n    "constants": {\n      "example_constant": "world!"\n    }\n}\'\n')),(0,r.kt)("p",null,"Response body below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "endpoint":{\n      "method":"GET",\n      "pattern":"/example"\n   },\n   "requests":{\n      "lookup":[],\n      "response":[]\n   },\n   "state":{\n      "config":{\n         "networkErrors":"no-filter",\n         "includeStatuses":[]\n      }\n   },\n   "_id":"60045c90cb78062ab5bdec85",\n   "name":"Endpoint Example",\n   "transformation":{\n      "input":"JSON",\n      "output":"JSON"\n   },\n   "inputMapping":{\n      "constants.example_constant":"hello"\n   },\n   "constants":{\n      "example_constant":"world!"\n   },\n   "createdAt":"2021-01-13T11:55:44.168Z",\n   "updatedAt":"2021-01-13T11:55:44.168Z",\n   "__v":0\n}\n')),(0,r.kt)("p",null,"Take note of the uuid in the ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," field. This Endpoint ID will be used for other API interactions."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: The response body will contain many ",(0,r.kt)("strong",{parentName:"p"},"default configurations")," if they were not specified in the create message.")),(0,r.kt)("h3",{id:"get"},"GET"),(0,r.kt)("p",null,"A GET request will return Endpoint Configs. This can be useful to get an existing Endpoint's ID."),(0,r.kt)("h4",{id:"get-all"},"GET all"),(0,r.kt)("p",null,"This GET request will return a list of all existing Endpoints."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"curl 'http://localhost:3003/endpoints'\n")),(0,r.kt)("p",null,"Response body below. Note that it is a list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n   {\n      "endpoint":{\n         "method":"GET",\n         "pattern":"/example"\n      },\n      "transformation":{\n         "input":"JSON",\n         "output":"JSON"\n      },\n      "requests":{\n         "lookup":[\n            \n         ],\n         "response":[\n            \n         ]\n      },\n      "state":{\n         "config":{\n            "networkErrors":"no-filter",\n            "includeStatuses":[\n               \n            ]\n         }\n      },\n      "_id":"60045c90cb78062ab5bdec85",\n      "name":"Endpoint Example",\n      "inputMapping":{\n         "constants.example_constant":"hello"\n      },\n      "constants":{\n         "example_constant":"world!"\n      },\n      "createdAt":"2021-01-17T15:49:36.877Z",\n      "updatedAt":"2021-01-17T15:49:36.877Z",\n      "__v":0\n   }\n]\n')),(0,r.kt)("h4",{id:"get-one"},"GET one"),(0,r.kt)("p",null,"For a specific Endpoint's details substitute its ID into the URL param below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"curl 'http://localhost:3003/endpoints/{Endpoint_ID}'\n")),(0,r.kt)("p",null,"Response body below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "endpoint":{\n      "method":"GET",\n      "pattern":"/example"\n   },\n   "transformation":{\n      "input":"JSON",\n      "output":"JSON"\n   },\n   "requests":{\n      "lookup":[\n         \n      ],\n      "response":[\n         \n      ]\n   },\n   "state":{\n      "config":{\n         "networkErrors":"no-filter",\n         "includeStatuses":[\n            \n         ]\n      }\n   },\n   "_id":"60045c90cb78062ab5bdec85",\n   "name":"Endpoint Example",\n   "inputMapping":{\n      "constants.example_constant":"hello"\n   },\n   "constants":{\n      "example_constant":"world!"\n   },\n   "createdAt":"2021-01-17T15:49:36.877Z",\n   "updatedAt":"2021-01-17T15:49:36.877Z",\n   "__v":0\n}\n')),(0,r.kt)("h3",{id:"put"},"PUT"),(0,r.kt)("p",null,"The PUT request is used to update a specific Endpoint's config. In the example below we are adding a new constant and an inputMapping field.\nIn the URL substitute in the Endpoint ID into the URL Param."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'curl --request PUT \'http://localhost:3003/endpoints/{Endpoint_ID}\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "name": "Endpoint Example",\n    "endpoint": {\n        "pattern": "/example",\n        "method": "GET"\n    },\n    "transformation": {\n        "input": "JSON",\n        "output": "JSON"\n    },\n    "inputMapping": {\n        "constants.example_constant": "hello",\n        "constants.new_constant": "foo"\n    },\n    "constants": {\n        "example_constant": "world!",\n        "new_constant": "bar"\n    }\n}\'\n')),(0,r.kt)("p",null,"Response Body below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "endpoint":{\n      "method":"GET",\n      "pattern":"/example"\n   },\n   "transformation":{\n      "input":"JSON",\n      "output":"JSON"\n   },\n   "requests":{\n      "lookup":[\n         \n      ],\n      "response":[\n         \n      ]\n   },\n   "state":{\n      "config":{\n         "networkErrors":"no-filter",\n         "includeStatuses":[\n            \n         ]\n      }\n   },\n   "_id":"60045c90cb78062ab5bdec85",\n   "name":"Endpoint Example",\n   "inputMapping":{\n      "constants.example_constant":"hello",\n      "constants.new_constant":"foo"\n   },\n   "constants":{\n      "example_constant":"world!",\n      "new_constant":"bar"\n   },\n   "createdAt":"2021-01-17T15:49:36.877Z",\n   "updatedAt":"2021-01-17T16:09:17.896Z",\n   "__v":0\n}\n')),(0,r.kt)("h3",{id:"delete"},"DELETE"),(0,r.kt)("p",null,"The delete request is used to completely remove an endpoint. Substitute in an Endpoint ID to delete it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"curl --request DELETE 'http://localhost:3003/endpoints/{Endpoint_ID}'\n")),(0,r.kt)("p",null,"Response body below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"message":"Endpoint with ID \'60045c90cb78062ab5bdec85\' deleted"}\n')))}c.isMDXComponent=!0}}]);