"use strict";(self.webpackChunkmapping_mediator=self.webpackChunkmapping_mediator||[]).push([[64],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=c(n),d=o,f=l["".concat(u,".").concat(d)]||l[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=l;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},5016:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return l}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),i=["components"],p={id:"mapping",title:"Mapping",sidebar_label:"Mapping"},u=void 0,c={unversionedId:"features/mapping",id:"features/mapping",title:"Mapping",description:"For the mapping, a inputMapping section in the Endpoint schema has to be added and this defines how the incoming data will be used to build up a new object with the desired structure.",source:"@site/docs/features/mapping.md",sourceDirName:"features",slug:"/features/mapping",permalink:"/openhim-mediator-mapping/docs/features/mapping",editUrl:"https://github.com/jembi/openhim-mediator-mapping/edit/master/docs/docs/features/mapping.md",tags:[],version:"current",frontMatter:{id:"mapping",title:"Mapping",sidebar_label:"Mapping"},sidebar:"someSidebar",previous:{title:"Transformation",permalink:"/openhim-mediator-mapping/docs/features/transformation"},next:{title:"State Management",permalink:"/openhim-mediator-mapping/docs/features/state-management"}},s=[],m={toc:s};function l(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"For the mapping, a ",(0,a.kt)("inlineCode",{parentName:"p"},"inputMapping")," section in the Endpoint schema has to be added and this defines how the incoming data will be used to build up a new object with the desired structure."),(0,a.kt)("p",null,"The basic structure of this schema is ",(0,a.kt)("inlineCode",{parentName:"p"},"key:value")," based. This means that the ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," of the object defines where to look for a value from the incoming document, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," of that ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," defines where to populate/build the new property on the outgoing document.\nThe root ",(0,a.kt)("inlineCode",{parentName:"p"},"inputMapping")," property is used to define the mapping of the incoming document and populate/build the outgoing object."),(0,a.kt)("p",null,"The example below lists the different mapping syntax available:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "inputMapping": {\n    "rootProperty": "rootProperty", // map incoming root property to an outgoing root property\n    "rootObject.object1.object2.property": "rootObject.property", // map incoming nested property to an outgoing nested property\n    "array[]": "array", // map incoming root array to an outgoing array.\n    "rootArray[1]": "rootArray[1]", // map incoming root array at index 1 to an outgoing array at index 1 (useful when using an output.json template to override a specific index value).\n    "rootArray[].property": "rootArray[].property", // map all incoming array nested property to an outgoing array nested property. Note: not specifying an index for the array will push in the new value, instead of overriding it at the specified index\n    "rootArray[1].property": "rootArray[1].property", // map incoming array nested property at index 1 to an outgoing array nested property at index 1 (useful when using an output.json template to override a specific index value).\n    "rootObject.array[].property": "rootObject.object1.array[].property", // map incoming property that is an array of objects to an outgoing object with a nested object containing an array of objects\n  }\n}\n')))}l.isMDXComponent=!0}}]);